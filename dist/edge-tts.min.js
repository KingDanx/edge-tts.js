var A="130.0.2849.68".split(".")[0];var L={"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${CHROMIUM_MAJOR_VERSION}.0.0.0 Safari/537.36 Edg/${CHROMIUM_MAJOR_VERSION}.0.0.0","Accept-Encoding":"gzip, deflate, br","Accept-Language":"en-US,en;q=0.9"},F={Pragma:"no-cache","Cache-Control":"no-cache",Origin:"chrome-extension://jdiccldimpdaibmpdkjnbmckianbfold",...L},K={Authority:"speech.platform.bing.com","Sec-CH-UA":`" Not;A Brand";v="99", "Microsoft Edge";v="${A} "Chromium";v="${A}"`,"Sec-CH-UA-Mobile":"?0",Accept:"*/*","Sec-Fetch-Site":"none","Sec-Fetch-Mode":"cors","Sec-Fetch-Dest":"empty",...L};var o={TRUSTED_CLIENT_TOKEN:"6A5AA1D4EAFF4E9FB37E23D68491D6F4",WSS_URL:"wss://speech.platform.bing.com/consumer/speech/synthesize/readaloud/edge/v1?TrustedClientToken=6A5AA1D4EAFF4E9FB37E23D68491D6F4",VOICE_LIST_URL:"https://speech.platform.bing.com/consumer/speech/synthesize/readaloud/voices/list?trustedclienttoken=6A5AA1D4EAFF4E9FB37E23D68491D6F4",CHROMIUM_FULL_VERSION:"130.0.2849.68",CHROMIUM_MAJOR_VERSION:A,SEC_MS_GEC_VERSION:"1-130.0.2849.68",WSS_HEADERS:F,VOICE_HEADERS:K,WIN_EPOCH:11644473600,OUTPUT_FORMATS:{AUDIO_24KHZ_48KBITRATE_MONO_MP3:{tag:"audio-24khz-48kbitrate-mono-mp3",ext:".mp3"},AUDIO_24KHZ_96KBITRATE_MONO_MP3:{tag:"audio-24khz-96kbitrate-mono-mp3",ext:".mp3"},WEBM_24KHZ_16BIT_MONO_OPUS:{tag:"webm-24khz-16bit-mono-opus",ext:".webm"}}},O=Object.freeze(o);import{createHash as p,randomUUID as W}from"crypto";function H(){let _=O.WSS_URL;return _+="&Sec-MS-GEC-Version=",_+=B(),_+="&ConnectionId=",_+=N(),_}function B(){let S=Math.floor(new Date().getTime()/1000),R=1e9,E=S+O.WIN_EPOCH;E-=E%300,E*=1e7;let I=`${Math.floor(E)}${O.TRUSTED_CLIENT_TOKEN}`;return p("sha256",I,"hex").toString().toUpperCase()}function N(){return W().replaceAll("-","")}import $ from"fs";class C{constructor({voice:_="",pitch:S="+0Hz",rate:R="+0%",volume:E="+0%",text:I="",fileType:M=O.OUTPUT_FORMATS.AUDIO_24KHZ_48KBITRATE_MONO_MP3}){this.voice=_,this.pitch=S,this.rate=R,this.volume=E,this.text=I,this.fileType=M}generateSSML(){let _="";return _+="X-RequestId:",_+=N(),_+=`\r
Content-Type:application/ssml+xml`,_+=`\r
X-Timestamp:${new Date}Z`,_+=`\r
Path:ssml`,_+=`\r
\r
<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xml:lang='en-US'>`,_+=`\r
\t<voice name='${this.voice}'>`,_+=`\r
\t\t<prosody pitch='${this.pitch}' rate='${this.rate}' volume='${this.volume}'>`,_+=`\r
\t\t\t${this.text}`,_+=`\r
\t\t</prosody>`,_+=`\r
\t</voice>`,_+=`\r
</speak>`,_}generateCommand(){let _="";return _+=`X-Timestamp:${new Date}`,_+=`\r
Content-Type:application/json; charset=utf-8`,_+=`\r
Path:speech.config`,_+=`\r
\r
{"context":{"synthesis":{"audio":{"metadataoptions":{"sentenceBoundaryEnabled":false,"wordBoundaryEnabled":true},"outputFormat":"${this.fileType.tag}"}}}}\r
`,_}}import c from"path";class V{static fileTypes=O.OUTPUT_FORMATS;static async getVoices(){try{return await(await fetch(O.VOICE_LIST_URL,{headers:O.VOICE_HEADERS})).json()}catch(_){return console.error(_),_}}constructor(_){this.url=H(),this.tts=new C(_),this.file=Buffer.alloc(0)}ttsToFile(_=""){let S=new WebSocket(this.url,{headers:O.WSS_HEADERS});S.binaryType="arraybuffer",S.addEventListener("error",(R)=>{S.close()}),S.addEventListener("close",(R)=>{let E=this.tts.text.length>20?20:this.tts.text.length,I=`${this.tts.voice}-${this.tts.text.slice(0,E).trim()}${this.tts.fileType.ext}`,M=c.join(_,I);$.writeFile(M,this.file,(U)=>{if(U)console.error("Error writing file:",U)})}),S.addEventListener("open",()=>{S.send(this.tts.generateCommand()),S.send(this.tts.generateSSML())}),S.addEventListener("message",(R)=>{if(R.data instanceof ArrayBuffer){let E=Buffer.from(R.data);if(E.length>=2){let I=E.readUInt16BE(0)+2,M=E.subarray(0,I);if(this.parseMessageText(M.toString()).Path!=="audio")return;let T=E.subarray(I),D=this.file.length+T.length;this.file=Buffer.concat([this.file,T],D)}else console.error("Received data is too short to contain a valid header.")}else if(typeof R.data==="string"){if(this.parseMessageText(R.data).Path==="turn.end")S.close()}})}disconnect(){if(this.socket!==null)this.socket.close()}send(_){if(this.socket!==null)this.socket.send(_)}parseMessageText(_){let S={};return _.split(`\r
`).filter((E)=>E!=="").map((E)=>{try{S.metaData=JSON.parse(E)}catch{let[I,M]=E.split(":");S[I]=M}}),S}}export{V as default};
